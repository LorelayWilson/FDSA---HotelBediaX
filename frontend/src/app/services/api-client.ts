//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IApiClient {
    /**
     * Obtiene todos los destinos con filtros y paginación
     * @param searchTerm (optional) Término de búsqueda que se aplica a nombre, descripción y código de país
     * @param countryCode (optional) Filtro por código de país específico
     * @param type (optional) Filtro por tipo de destino específico
     * @param page (optional) Número de página actual (comienza en 1)
     * @param pageSize (optional) Número de elementos por página (máximo 100 recomendado)
     * @return Lista de destinos obtenida exitosamente
     */
    destinationsGET(searchTerm: string | undefined, countryCode: string | undefined, type: DestinationType | undefined, page: number | undefined, pageSize: number | undefined): Observable<DestinationDtoPagedResultDto>;
    /**
     * Crea un nuevo destino
     * @param body (optional) Datos del nuevo destino
     * @return Destino creado exitosamente
     */
    destinationsPOST(body: CreateDestinationDto | undefined): Observable<DestinationDto>;
    /**
     * Obtiene un destino por su ID
     * @param id ID del destino
     * @return Destino encontrado exitosamente
     */
    destinationsGET2(id: number): Observable<DestinationDto>;
    /**
     * Actualiza un destino existente
     * @param id ID del destino a actualizar
     * @param body (optional) Datos actualizados del destino
     * @return Destino actualizado exitosamente
     */
    destinationsPUT(id: number, body: UpdateDestinationDto | undefined): Observable<DestinationDto>;
    /**
     * Elimina un destino
     * @param id ID del destino a eliminar
     * @return Destino eliminado exitosamente
     */
    destinationsDELETE(id: number): Observable<void>;
    /**
     * Obtiene la lista de códigos de países disponibles
     * @return Lista de países obtenida exitosamente
     */
    countries(): Observable<string[]>;
    /**
     * Obtiene la lista de tipos de destino disponibles
     * @return Lista de tipos obtenida exitosamente
     */
    types(): Observable<string[]>;
}

@Injectable({
    providedIn: 'root'
})
export class ApiClient implements IApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Obtiene todos los destinos con filtros y paginación
     * @param searchTerm (optional) Término de búsqueda que se aplica a nombre, descripción y código de país
     * @param countryCode (optional) Filtro por código de país específico
     * @param type (optional) Filtro por tipo de destino específico
     * @param page (optional) Número de página actual (comienza en 1)
     * @param pageSize (optional) Número de elementos por página (máximo 100 recomendado)
     * @return Lista de destinos obtenida exitosamente
     */
    destinationsGET(searchTerm: string | undefined, countryCode: string | undefined, type: DestinationType | undefined, page: number | undefined, pageSize: number | undefined): Observable<DestinationDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/v1/Destinations?";
        if (searchTerm === null)
            throw new globalThis.Error("The parameter 'searchTerm' cannot be null.");
        else if (searchTerm !== undefined)
            url_ += "SearchTerm=" + encodeURIComponent("" + searchTerm) + "&";
        if (countryCode === null)
            throw new globalThis.Error("The parameter 'countryCode' cannot be null.");
        else if (countryCode !== undefined)
            url_ += "CountryCode=" + encodeURIComponent("" + countryCode) + "&";
        if (type === null)
            throw new globalThis.Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new globalThis.Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDestinationsGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDestinationsGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DestinationDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DestinationDtoPagedResultDto>;
        }));
    }

    protected processDestinationsGET(response: HttpResponseBase): Observable<DestinationDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DestinationDtoPagedResultDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Error interno del servidor", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Crea un nuevo destino
     * @param body (optional) Datos del nuevo destino
     * @return Destino creado exitosamente
     */
    destinationsPOST(body: CreateDestinationDto | undefined): Observable<DestinationDto> {
        let url_ = this.baseUrl + "/api/v1/Destinations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDestinationsPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDestinationsPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DestinationDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DestinationDto>;
        }));
    }

    protected processDestinationsPOST(response: HttpResponseBase): Observable<DestinationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = DestinationDto.fromJS(resultData201);
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Datos de entrada inv\u00e1lidos", status, _responseText, _headers, result400);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Error interno del servidor", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Obtiene un destino por su ID
     * @param id ID del destino
     * @return Destino encontrado exitosamente
     */
    destinationsGET2(id: number): Observable<DestinationDto> {
        let url_ = this.baseUrl + "/api/v1/Destinations/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDestinationsGET2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDestinationsGET2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DestinationDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DestinationDto>;
        }));
    }

    protected processDestinationsGET2(response: HttpResponseBase): Observable<DestinationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DestinationDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Destino no encontrado", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Error interno del servidor", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Actualiza un destino existente
     * @param id ID del destino a actualizar
     * @param body (optional) Datos actualizados del destino
     * @return Destino actualizado exitosamente
     */
    destinationsPUT(id: number, body: UpdateDestinationDto | undefined): Observable<DestinationDto> {
        let url_ = this.baseUrl + "/api/v1/Destinations/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDestinationsPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDestinationsPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DestinationDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DestinationDto>;
        }));
    }

    protected processDestinationsPUT(response: HttpResponseBase): Observable<DestinationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DestinationDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Datos de entrada inv\u00e1lidos", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Destino no encontrado", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Error interno del servidor", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Elimina un destino
     * @param id ID del destino a eliminar
     * @return Destino eliminado exitosamente
     */
    destinationsDELETE(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/Destinations/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDestinationsDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDestinationsDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDestinationsDELETE(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Destino no encontrado", status, _responseText, _headers, result404);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Error interno del servidor", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Obtiene la lista de códigos de países disponibles
     * @return Lista de países obtenida exitosamente
     */
    countries(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/v1/Destinations/countries";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCountries(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCountries(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processCountries(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = null as any;
            }
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Error interno del servidor", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * Obtiene la lista de tipos de destino disponibles
     * @return Lista de tipos obtenida exitosamente
     */
    types(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/v1/Destinations/types";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTypes(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTypes(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string[]>;
        }));
    }

    protected processTypes(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = null as any;
            }
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("Error interno del servidor", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

/** DTO para crear un nuevo destino No incluye ID ni LastModif ya que se generan automáticamente */
export class CreateDestinationDto implements ICreateDestinationDto {
    /** Nombre del destino turístico */
    name!: string;
    /** Descripción detallada del destino */
    description!: string;
    /** Código ISO del país (3 caracteres) */
    countryCode!: string;
    type!: DestinationType;

    constructor(data?: ICreateDestinationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.countryCode = _data["countryCode"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CreateDestinationDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateDestinationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["countryCode"] = this.countryCode;
        data["type"] = this.type;
        return data;
    }
}

/** DTO para crear un nuevo destino No incluye ID ni LastModif ya que se generan automáticamente */
export interface ICreateDestinationDto {
    /** Nombre del destino turístico */
    name: string;
    /** Descripción detallada del destino */
    description: string;
    /** Código ISO del país (3 caracteres) */
    countryCode: string;
    type: DestinationType;
}

/** DTO para transferir información completa de un destino Se usa para respuestas de la API */
export class DestinationDto implements IDestinationDto {
    /** Identificador único del destino */
    id?: number;
    /** Nombre del destino turístico */
    name?: string | undefined;
    /** Descripción detallada del destino */
    description?: string | undefined;
    /** Código ISO del país (3 caracteres) */
    countryCode?: string | undefined;
    type?: DestinationType;
    /** Fecha de última modificación */
    lastModif?: Date;

    constructor(data?: IDestinationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.countryCode = _data["countryCode"];
            this.type = _data["type"];
            this.lastModif = _data["lastModif"] ? new Date(_data["lastModif"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): DestinationDto {
        data = typeof data === 'object' ? data : {};
        let result = new DestinationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["countryCode"] = this.countryCode;
        data["type"] = this.type;
        data["lastModif"] = this.lastModif ? this.lastModif.toISOString() : undefined as any;
        return data;
    }
}

/** DTO para transferir información completa de un destino Se usa para respuestas de la API */
export interface IDestinationDto {
    /** Identificador único del destino */
    id?: number;
    /** Nombre del destino turístico */
    name?: string | undefined;
    /** Descripción detallada del destino */
    description?: string | undefined;
    /** Código ISO del país (3 caracteres) */
    countryCode?: string | undefined;
    type?: DestinationType;
    /** Fecha de última modificación */
    lastModif?: Date;
}

/** DTO genérico para resultados paginados Se puede usar con cualquier tipo de entidad */
export class DestinationDtoPagedResultDto implements IDestinationDtoPagedResultDto {
    /** Lista de elementos de la página actual */
    items?: DestinationDto[] | undefined;
    /** Número total de elementos que coinciden con los filtros */
    totalCount?: number;
    /** Número de página actual */
    page?: number;
    /** Número de elementos por página */
    pageSize?: number;
    /** Número total de páginas calculado automáticamente */
    readonly totalPages?: number;

    constructor(data?: IDestinationDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DestinationDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            (this as any).totalPages = _data["totalPages"];
        }
    }

    static fromJS(data: any): DestinationDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new DestinationDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : undefined as any);
        }
        data["totalCount"] = this.totalCount;
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["totalPages"] = this.totalPages;
        return data;
    }
}

/** DTO genérico para resultados paginados Se puede usar con cualquier tipo de entidad */
export interface IDestinationDtoPagedResultDto {
    /** Lista de elementos de la página actual */
    items?: DestinationDto[] | undefined;
    /** Número total de elementos que coinciden con los filtros */
    totalCount?: number;
    /** Número de página actual */
    page?: number;
    /** Número de elementos por página */
    pageSize?: number;
    /** Número total de páginas calculado automáticamente */
    totalPages?: number;
}

/** Enum que define los tipos de destinos turísticos disponibles */
export enum DestinationType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

/** DTO para actualizar un destino existente No incluye ID ni LastModif ya que se manejan internamente */
export class UpdateDestinationDto implements IUpdateDestinationDto {
    /** Nombre del destino turístico */
    name!: string;
    /** Descripción detallada del destino */
    description!: string;
    /** Código ISO del país (3 caracteres) */
    countryCode!: string;
    type!: DestinationType;

    constructor(data?: IUpdateDestinationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.countryCode = _data["countryCode"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): UpdateDestinationDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDestinationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["countryCode"] = this.countryCode;
        data["type"] = this.type;
        return data;
    }
}

/** DTO para actualizar un destino existente No incluye ID ni LastModif ya que se manejan internamente */
export interface IUpdateDestinationDto {
    /** Nombre del destino turístico */
    name: string;
    /** Descripción detallada del destino */
    description: string;
    /** Código ISO del país (3 caracteres) */
    countryCode: string;
    type: DestinationType;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new ApiException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}